{"ast":null,"code":"/* /context/AppContext.js */\nimport React from \"react\"; // create auth context with default value\n// set backup default for isAuthenticated if none is provided in Provider\n\nconst AppContext = /*#__PURE__*/React.createContext({\n  isAuthenticated: true,\n  cart: {\n    items: [],\n    total: 0\n  },\n  addItem: () => {},\n  removeItem: () => {},\n  user: true,\n  setUser: () => {}\n});\nexport default AppContext; // /* /context/AppContext.js */\n// import React from \"react\";\n// // create auth context with default value\n// // set backup default for isAuthenticated if none is provided in Provider\n// const AppContext = React.createContext({\n//   isAuthenticated: true,\n//   cart: { items: [], total: 0 },\n//   addItem: () => {},\n//   removeItem: () => {},\n//   user: false,\n//   setUser: () => {},\n// });\n// export default AppContext;\n\n/*\nimport { createContext, useState } from \"react\";\n\nexport const AppContext = createContext({});\n\nexport const AppProvider = ({ children }) => {\n  const [globalData, setGlobalData] = useState({\n    isAuthenticated: false,\n    setIsAuthenticated: () => {},\n    cart: {\n      items: [],\n      total: 0,\n    },\n    user: false,\n    setUser: () => {},\n    addItems: () => {},\n    removeItems: () => {},\n  });\n\n  globalData.setIsAuthenticated = (boolVal) => {\n    setGlobalData((prev) => ({ ...prev, isAuthenticated: boolVal }));\n  };\n\n  globalData.setUser = (userData) => {\n    setGlobalData((prev) => ({ ...prev, user: userData }));\n  };\n\n  globalData.addItems = (item) => {\n    let { items } = globalData.cart;\n    let foundItem = true;\n\n    if (items.length > 0) {\n      foundItem = items.find(\n        (i) => i.attributes.dishId === item.attributes.dishId\n      );\n\n      if (!foundItem) foundItem = false;\n    } else {\n      foundItem = false;\n    }\n\n    if (!foundItem) {\n      let temp = JSON.parse(JSON.stringify(item));\n      temp.quantity = 1;\n\n      var newCart = {\n        items: [...globalData.cart.items, temp],\n        total: globalData.cart.total + item.attributes.price,\n      };\n\n      setGlobalData((prev) => ({ ...prev, cart: newCart }));\n    } else {\n      newCart = {\n        items: items.map((item) => {\n          if (item.attributes.dishId === foundItem.attributes.dishId) {\n            return Object.assign({}, item, { quantity: item.quantity + 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: globalData.cart.total + item.attributes.price,\n      };\n\n      setGlobalData((prev) => ({ ...prev, cart: newCart }));\n    }\n  };\n\n  globalData.removeItems = (item) => {\n    let { items } = globalData.cart;\n\n    const foundItem = items.find(\n      (i) => i.attributes.dishId === item.attributes.dishId\n    );\n\n    console.log(foundItem);\n\n    if (foundItem.quantity > 1) {\n      var newCart = {\n        items: items.map((item) => {\n          if (item.attributes.dishId === foundItem.attributes.dishId) {\n            return Object.assign({}, item, { quantity: item.quantity - 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: globalData.cart.total - item.attributes.price,\n      };\n    } else {\n      const index = items.findIndex(\n        (i) => i.attributes.dishId === foundItem.attributes.dishId\n      );\n\n      items.splice(index, 1);\n\n      var newCart = {\n        items: items,\n        total: globalData.cart.total - item.attributes.price,\n      };\n    }\n\n    setGlobalData((prev) => ({ ...prev, cart: newCart }));\n  };\n\n  return (\n    <AppContext.Provider value={{ globalData, setGlobalData }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;\n\n*/\n\n/* /context/AppContext.js */\n\n/*\nimport React from \"react\";\n// create auth context with default value\n\n// set backup default for isAuthenticated if none is provided in Provider\nconst AppContext = React.createContext(\n    {isAuthenticated:true, \n        cart: {items:[], \n        total:0},\n        addItem:()=>{},\n        removeItem:()=>{},\n        user:false, \n        setUser:()=>{}\n    });\nexport default AppContext;\n*/","map":{"version":3,"sources":["/Users/jennifergerred/Documents/MIT/Week 28/restaurant/components/context.js"],"names":["React","AppContext","createContext","isAuthenticated","cart","items","total","addItem","removeItem","user","setUser"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AACA,MAAMC,UAAU,gBAAGD,KAAK,CAACE,aAAN,CACf;AAACC,EAAAA,eAAe,EAAC,IAAjB;AACIC,EAAAA,IAAI,EAAE;AAACC,IAAAA,KAAK,EAAC,EAAP;AACNC,IAAAA,KAAK,EAAC;AADA,GADV;AAGIC,EAAAA,OAAO,EAAC,MAAI,CAAE,CAHlB;AAIIC,EAAAA,UAAU,EAAC,MAAI,CAAE,CAJrB;AAKIC,EAAAA,IAAI,EAAC,IALT;AAMIC,EAAAA,OAAO,EAAC,MAAI,CAAE;AANlB,CADe,CAAnB;AAUA,eAAeT,UAAfsourcesContent":["/* /context/AppContext.js */\n\nimport React from \"react\";\n// create auth context with default value\n\n// set backup default for isAuthenticated if none is provided in Provider\nconst AppContext = React.createContext(\n    {isAuthenticated:true, \n        cart: {items:[], \n        total:0},\n        addItem:()=>{},\n        removeItem:()=>{},\n        user:true, \n        setUser:()=>{}\n    });\n  \nexport default AppContext;\n\n// /* /context/AppContext.js */\n\n// import React from \"react\";\n// // create auth context with default value\n\n// // set backup default for isAuthenticated if none is provided in Provider\n// const AppContext = React.createContext({\n//   isAuthenticated: true,\n//   cart: { items: [], total: 0 },\n//   addItem: () => {},\n//   removeItem: () => {},\n//   user: false,\n//   setUser: () => {},\n// });\n// export default AppContext;\n\n\n\n\n/*\nimport { createContext, useState } from \"react\";\n\nexport const AppContext = createContext({});\n\nexport const AppProvider = ({ children }) => {\n  const [globalData, setGlobalData] = useState({\n    isAuthenticated: false,\n    setIsAuthenticated: () => {},\n    cart: {\n      items: [],\n      total: 0,\n    },\n    user: false,\n    setUser: () => {},\n    addItems: () => {},\n    removeItems: () => {},\n  });\n\n  globalData.setIsAuthenticated = (boolVal) => {\n    setGlobalData((prev) => ({ ...prev, isAuthenticated: boolVal }));\n  };\n\n  globalData.setUser = (userData) => {\n    setGlobalData((prev) => ({ ...prev, user: userData }));\n  };\n\n  globalData.addItems = (item) => {\n    let { items } = globalData.cart;\n    let foundItem = true;\n\n    if (items.length > 0) {\n      foundItem = items.find(\n        (i) => i.attributes.dishId === item.attributes.dishId\n      );\n\n      if (!foundItem) foundItem = false;\n    } else {\n      foundItem = false;\n    }\n\n    if (!foundItem) {\n      let temp = JSON.parse(JSON.stringify(item));\n      temp.quantity = 1;\n\n      var newCart = {\n        items: [...globalData.cart.items, temp],\n        total: globalData.cart.total + item.attributes.price,\n      };\n\n      setGlobalData((prev) => ({ ...prev, cart: newCart }));\n    } else {\n      newCart = {\n        items: items.map((item) => {\n          if (item.attributes.dishId === foundItem.attributes.dishId) {\n            return Object.assign({}, item, { quantity: item.quantity + 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: globalData.cart.total + item.attributes.price,\n      };\n\n      setGlobalData((prev) => ({ ...prev, cart: newCart }));\n    }\n  };\n\n  globalData.removeItems = (item) => {\n    let { items } = globalData.cart;\n\n    const foundItem = items.find(\n      (i) => i.attributes.dishId === item.attributes.dishId\n    );\n\n    console.log(foundItem);\n\n    if (foundItem.quantity > 1) {\n      var newCart = {\n        items: items.map((item) => {\n          if (item.attributes.dishId === foundItem.attributes.dishId) {\n            return Object.assign({}, item, { quantity: item.quantity - 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: globalData.cart.total - item.attributes.price,\n      };\n    } else {\n      const index = items.findIndex(\n        (i) => i.attributes.dishId === foundItem.attributes.dishId\n      );\n\n      items.splice(index, 1);\n\n      var newCart = {\n        items: items,\n        total: globalData.cart.total - item.attributes.price,\n      };\n    }\n\n    setGlobalData((prev) => ({ ...prev, cart: newCart }));\n  };\n\n  return (\n    <AppContext.Provider value={{ globalData, setGlobalData }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;\n\n*/\n\n\n/* /context/AppContext.js */\n/*\nimport React from \"react\";\n// create auth context with default value\n\n// set backup default for isAuthenticated if none is provided in Provider\nconst AppContext = React.createContext(\n    {isAuthenticated:true, \n        cart: {items:[], \n        total:0},\n        addItem:()=>{},\n        removeItem:()=>{},\n        user:false, \n        setUser:()=>{}\n    });\nexport default AppContext;\n*/"]},"metadata":{},"sourceType":"module"}