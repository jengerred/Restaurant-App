{"ast":null,"code":"import React from \"react\";\nimport { createContext } from \"react\";\nconst AppContext = /*#__PURE__*/createContext({\n  isAuthenticated: false,\n  cart: {\n    items: [],\n    total: 0\n  },\n  addItem: () => {},\n  removeItem: () => {},\n  user: false,\n  setUser: () => {}\n});\nexport default AppContext;\n/*\n\nimport { createContext, useState } from \"react\";\n\nexport const AppContext = createContext({});\n\nexport const AppProvider = ({ children }) => {\n  const [globalData, setGlobalData] = useState({\n    isAuthenticated: false,\n    setIsAuthenticated: () => {},\n    cart: {\n      items: [],\n      total: 0,\n    },\n    user: false,\n    setUser: () => {},\n    addItems: () => {},\n    removeItems: () => {},\n  });\n\n  globalData.setIsAuthenticated = (boolVal) => {\n    setGlobalData((prev) => ({ ...prev, isAuthenticated: boolVal }));\n  };\n\n  globalData.setUser = (userData) => {\n    setGlobalData((prev) => ({ ...prev, user: userData }));\n  };\n\n  globalData.addItems = (item) => {\n    let { items } = globalData.cart;\n    let foundItem = true;\n\n    if (items.length > 0) {\n      foundItem = items.find(\n        (i) => i.attributes.dishId === item.attributes.dishId\n      );\n\n      if (!foundItem) foundItem = false;\n    } else {\n      foundItem = false;\n    }\n\n    if (!foundItem) {\n      let temp = JSON.parse(JSON.stringify(item));\n      temp.quantity = 1;\n\n      var newCart = {\n        items: [...globalData.cart.items, temp],\n        total: globalData.cart.total + item.attributes.price,\n      };\n\n      setGlobalData((prev) => ({ ...prev, cart: newCart }));\n    } else {\n      newCart = {\n        items: items.map((item) => {\n          if (item.attributes.dishId === foundItem.attributes.dishId) {\n            return Object.assign({}, item, { quantity: item.quantity + 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: globalData.cart.total + item.attributes.price,\n      };\n\n      setGlobalData((prev) => ({ ...prev, cart: newCart }));\n    }\n  };\n\n  globalData.removeItems = (item) => {\n    let { items } = globalData.cart;\n\n    const foundItem = items.find(\n      (i) => i.attributes.dishId === item.attributes.dishId\n    );\n\n    console.log(foundItem);\n\n    if (foundItem.quantity > 1) {\n      var newCart = {\n        items: items.map((item) => {\n          if (item.attributes.dishId === foundItem.attributes.dishId) {\n            return Object.assign({}, item, { quantity: item.quantity - 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: globalData.cart.total - item.attributes.price,\n      };\n    } else {\n      const index = items.findIndex(\n        (i) => i.attributes.dishId === foundItem.attributes.dishId\n      );\n\n      items.splice(index, 1);\n\n      var newCart = {\n        items: items,\n        total: globalData.cart.total - item.attributes.price,\n      };\n    }\n\n    setGlobalData((prev) => ({ ...prev, cart: newCart }));\n  };\n\n  return (\n    <AppContext.Provider value={{ globalData, setGlobalData }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;\n\n*/","map":{"version":3,"sources":["/Users/jennifergerred/Documents/MIT/Week 28/restaurant/components/context.js"],"names":["React","createContext","AppContext","isAuthenticated","cart","items","total","addItem","removeItem","user","setUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,OAA9B;AAEA,MAAMC,UAAU,gBAAGD,aAAa,CAC5B;AACIE,EAAAA,eAAe,EAAC,KADpB;AAGIC,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAC,EADJ;AAEFC,IAAAA,KAAK,EAAC;AAFJ,GAHV;AAOQC,EAAAA,OAAO,EAAC,MAAI,CAAE,CAPtB;AAQQC,EAAAA,UAAU,EAAC,MAAI,CAAE,CARzB;AAUIC,EAAAA,IAAI,EAAC,KAVT;AAWIC,EAAAA,OAAO,EAAC,MAAI,CAAE;AAXlB,CAD4B,CAAhC;AAeI,eAAeR,UAAfsourcesContent":["import React from \"react\";\nimport { createContext } from \"react\";\n\nconst AppContext = createContext(\n    {\n        isAuthenticated:false, \n\n        cart: {\n            items:[], \n            total:0},\n\n            addItem:()=>{},\n            removeItem:()=>{},\n\n        user:false, \n        setUser:()=>{},\n    });\n\n    export default AppContext;\n    \n\n\n\n/*\n\nimport { createContext, useState } from \"react\";\n\nexport const AppContext = createContext({});\n\nexport const AppProvider = ({ children }) => {\n  const [globalData, setGlobalData] = useState({\n    isAuthenticated: false,\n    setIsAuthenticated: () => {},\n    cart: {\n      items: [],\n      total: 0,\n    },\n    user: false,\n    setUser: () => {},\n    addItems: () => {},\n    removeItems: () => {},\n  });\n\n  globalData.setIsAuthenticated = (boolVal) => {\n    setGlobalData((prev) => ({ ...prev, isAuthenticated: boolVal }));\n  };\n\n  globalData.setUser = (userData) => {\n    setGlobalData((prev) => ({ ...prev, user: userData }));\n  };\n\n  globalData.addItems = (item) => {\n    let { items } = globalData.cart;\n    let foundItem = true;\n\n    if (items.length > 0) {\n      foundItem = items.find(\n        (i) => i.attributes.dishId === item.attributes.dishId\n      );\n\n      if (!foundItem) foundItem = false;\n    } else {\n      foundItem = false;\n    }\n\n    if (!foundItem) {\n      let temp = JSON.parse(JSON.stringify(item));\n      temp.quantity = 1;\n\n      var newCart = {\n        items: [...globalData.cart.items, temp],\n        total: globalData.cart.total + item.attributes.price,\n      };\n\n      setGlobalData((prev) => ({ ...prev, cart: newCart }));\n    } else {\n      newCart = {\n        items: items.map((item) => {\n          if (item.attributes.dishId === foundItem.attributes.dishId) {\n            return Object.assign({}, item, { quantity: item.quantity + 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: globalData.cart.total + item.attributes.price,\n      };\n\n      setGlobalData((prev) => ({ ...prev, cart: newCart }));\n    }\n  };\n\n  globalData.removeItems = (item) => {\n    let { items } = globalData.cart;\n\n    const foundItem = items.find(\n      (i) => i.attributes.dishId === item.attributes.dishId\n    );\n\n    console.log(foundItem);\n\n    if (foundItem.quantity > 1) {\n      var newCart = {\n        items: items.map((item) => {\n          if (item.attributes.dishId === foundItem.attributes.dishId) {\n            return Object.assign({}, item, { quantity: item.quantity - 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: globalData.cart.total - item.attributes.price,\n      };\n    } else {\n      const index = items.findIndex(\n        (i) => i.attributes.dishId === foundItem.attributes.dishId\n      );\n\n      items.splice(index, 1);\n\n      var newCart = {\n        items: items,\n        total: globalData.cart.total - item.attributes.price,\n      };\n    }\n\n    setGlobalData((prev) => ({ ...prev, cart: newCart }));\n  };\n\n  return (\n    <AppContext.Provider value={{ globalData, setGlobalData }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;\n\n*/\n\n\n"]},"metadata":{},"sourceType":"module"}