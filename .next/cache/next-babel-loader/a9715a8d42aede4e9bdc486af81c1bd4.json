{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/jennifergerred/Documents/MIT/Week 28/restaurant/pages/menu.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"../components/dishes\";\nimport { useContext, useState } from 'react';\nimport Link from \"next/link\";\nimport AppContext from \"../components/context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction Menu() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(\"Query Data: \".concat(data.restaurants));\n  var searchQuery = data.restaurants.filter(function (res) {\n    return res.name.toLowerCase().includes(props.search);\n  });\n  var restId = searchQuery[0].id; // definet renderer for Dishes\n\n  var renderDishes = function renderDishes(restaurantID) {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    xs: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, renderDishes(restaurantID)));\n}\n\n_s(Menu, \"l1Ak/LzRian4lZrHyfOjQOP3flU=\", false, function () {\n  return [useQuery];\n});\n\n_c = Menu;\nexport default Menu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"sources":["/Users/jennifergerred/Documents/MIT/Week 28/restaurant/pages/menu.js"],"names":["gql","useQuery","Dishes","useContext","useState","Link","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","Menu","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","props","search","restId","id","renderDishes"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAQA,GAAR,EAAYC,QAAZ,QAA2B,gBAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,UAAR,EAAoBC,QAApB,QAAmC,OAAnC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAGA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,GARF,EASEC,GATF,QASY,YATZ;;AAWE,SAASC,IAAT,GAAgB;AAAA;;AAAA;;AAAA,kBACuBZ,QAAQ,CAAC,CAAD,CAD/B;AAAA,MACVa,YADU;AAAA,MACIC,eADJ;;AAAA,oBAEAf,UAAU,CAACG,UAAD,CAFV;AAAA,MAETa,IAFS,eAETA,IAFS;;AAAA,mBAGUf,QAAQ,CAACe,IAAD,CAHlB;AAAA,MAGTC,KAHS;AAAA,MAGFC,QAHE;;AAIhB,MAAMC,eAAe,GAAGtB,GAAH,mBAArB;;AAJgB,kBAgBiBC,QAAQ,CAACqB,eAAD,CAhBzB;AAAA,MAgBRC,OAhBQ,aAgBRA,OAhBQ;AAAA,MAgBCC,KAhBD,aAgBCA,KAhBD;AAAA,MAgBQC,IAhBR,aAgBQA,IAhBR;;AAiBhB,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AACXC,EAAAA,OAAO,CAACC,GAAR,uBAA2BF,IAAI,CAACG,WAAhC;AAGF,MAAIC,WAAW,GAAGJ,IAAI,CAACG,WAAL,CAAiBE,MAAjB,CAAwB,UAACC,GAAD,EAAQ;AAC9C,WAAOA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCC,KAAK,CAACC,MAAtC,CAAP;AACD,GAFe,CAAlB;AAIA,MAAIC,MAAM,GAAGR,WAAW,CAAC,CAAD,CAAX,CAAeS,EAA5B,CA3BkB,CA6BlB;;AACE,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACtB,YAAD,EAAkB;AAErC,WAAQ,MAAC,MAAD;AAAQ,MAAA,MAAM,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAR;AACD,GAHD;;AAMA,SAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCsB,YAAY,CAACtB,YAAD,CADb,CAFA,CAFF;AAYD;;GAhDUD,I;UAgBwBf,Q;;;KAhBxBe,I;AAqDT,eAAeA,IAAf","sourcesContent":["import {gql,useQuery} from '@apollo/client';\nimport Dishes from \"../components/dishes\"\nimport {useContext, useState} from 'react';\nimport Link from \"next/link\";\n\n\nimport AppContext from \"../components/context\"\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col} from \"reactstrap\";\n\n  function Menu() {\n  const[restaurantID, setRestaurantID] = useState(0)\n  const {cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data: ${data.restaurants}`)\n\n\nlet searchQuery = data.restaurants.filter((res) =>{\n    return res.name.toLowerCase().includes(props.search)\n  })\n\nlet restId = searchQuery[0].id\n \n// definet renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    \n    return (<Dishes restId={restaurantID}> </Dishes>)\n  };\n\n\n  return(\n\n    <Container>\n   \n    <Row xs='3'>\n    {renderDishes(restaurantID)}\n    </Row>\n \n    </Container>\n \n  )\n\n}\n\n\n\n\n  export default Menu;"]},"metadata":{},"sourceType":"module"}