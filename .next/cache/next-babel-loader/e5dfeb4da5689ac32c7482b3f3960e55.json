{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/jennifergerred/Documents/MIT/Week 28/restaurant/pages/menu.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query($id: ID!) {\\n      restaurant(id: $id) {\\n        id\\n        name\\n        dishes {\\n          id\\n          name\\n          description\\n          price\\n          image {\\n            url\\n          }\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"../components/dishes\";\nimport { useContext, useState } from 'react';\nimport Link from \"next/link\";\nimport Cart from \"../components/cart\";\nimport AppContext from \"../components/context\";\nimport { Row, Col } from \"reactstrap\";\n\nfunction Menu(_ref) {\n  _s();\n\n  var _this = this;\n\n  var restId = _ref.restId;\n\n  var _useState = useState(),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      addItem = _useContext.addItem;\n\n  var GET_RESTAURANT_DISHES = gql(_templateObject());\n\n  var _useContext2 = useContext(AppContext),\n      cart = _useContext2.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var router = useRouter();\n\n  var _useQuery = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restId\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  var restaurant = data.restaurant;\n\n  if (restId > 0) {\n    var renderDishes = function renderDishes(restaurantID) {\n      return __jsx(Dishes, {\n        restId: restaurantID,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 14\n        }\n      }, \" \");\n    };\n\n    return __jsx(React.Fragment, null, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }, \"This is where the specials will be\"), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }\n    }, \"Specials\"), renderDishes(restaurantID), __jsx(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }, __jsx(Cart, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 1\n      }\n    }))));\n  }\n}\n\n_s(Menu, \"PfbikBnCYVFyMz19rNERC0IbLG4=\", true, function () {\n  return [useQuery];\n});\n\n_c = Menu;\nexport default Menu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"sources":["/Users/jennifergerred/Documents/MIT/Week 28/restaurant/pages/menu.js"],"names":["gql","useQuery","Dishes","useContext","useState","Link","Cart","AppContext","Row","Col","Menu","restId","restaurantID","setRestaurantID","addItem","GET_RESTAURANT_DISHES","cart","state","setState","router","useRouter","variables","id","loading","error","data","restaurant","renderDishes"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAQA,GAAR,EAAYC,QAAZ,QAA2B,gBAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,UAAR,EAAoBC,QAApB,QAAmC,OAAnC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,YAAvB;;AAGE,SAASC,IAAT,OAAwB;AAAA;;AAAA;;AAAA,MAATC,MAAS,QAATA,MAAS;;AAAA,kBACkBP,QAAQ,EAD1B;AAAA,MACfQ,YADe;AAAA,MACDC,eADC;;AAAA,oBAEJV,UAAU,CAACI,UAAD,CAFN;AAAA,MAEfO,OAFe,eAEfA,OAFe;;AAGtB,MAAMC,qBAAqB,GAAGf,GAAH,mBAA3B;;AAHsB,qBAqBRG,UAAU,CAACI,UAAD,CArBF;AAAA,MAqBjBS,IArBiB,gBAqBjBA,IArBiB;;AAAA,mBAsBEZ,QAAQ,CAACY,IAAD,CAtBV;AAAA,MAsBjBC,KAtBiB;AAAA,MAsBVC,QAtBU;;AAuBxB,MAAMC,MAAM,GAAGC,SAAS,EAAxB;;AAvBwB,kBAyBSnB,QAAQ,CAACc,qBAAD,EAAwB;AAC/DM,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEX;AAAN;AADoD,GAAxB,CAzBjB;AAAA,MAyBhBY,OAzBgB,aAyBhBA,OAzBgB;AAAA,MAyBPC,KAzBO,aAyBPA,KAzBO;AAAA,MAyBAC,IAzBA,aAyBAA,IAzBA;;AA6BxB,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACX,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;AAEX,MAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;;AAEA,MAAIf,MAAM,GAAG,CAAb,EAAe;AAEf,QAAMgB,YAAY,GAAG,SAAfA,YAAe,CAACf,YAAD,EAAkB;AACrC,aAAS,MAAC,MAAD;AAAQ,QAAA,MAAM,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAT;AACD,KAFD;;AAIF,WACI,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADA,EAEA,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,EAECe,YAAY,CAACf,YAAD,CAFb,EAGA,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACJ,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADI,CAHA,CAFA,CADJ;AAYC;AACE;;GAtDQF,I;UAyBwBT,Q;;;KAzBxBS,I;AA0DT,eAAeA,IAAf","sourcesContent":["import {gql,useQuery} from '@apollo/client';\nimport Dishes from \"../components/dishes\";\nimport {useContext, useState} from 'react';\nimport Link from \"next/link\";\nimport Cart from \"../components/cart\";\nimport AppContext from \"../components/context\";\nimport {Row, Col} from \"reactstrap\";\n\n\n  function Menu({restId}) {\n    const [restaurantID, setRestaurantID] = useState()\n    const {addItem} = useContext(AppContext)\n    const GET_RESTAURANT_DISHES = gql`\n    query($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n      }\n    }\n  `;\n\n  const {cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const router = useRouter();\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restId},\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  let restaurant = data.restaurant;\n\n  if (restId > 0){\n\n  const renderDishes = (restaurantID) => {\n    return ( <Dishes restId={restaurantID}> </Dishes>)\n  };\n\nreturn (\n    <>\n    <h1>This is where the specials will be</h1>\n    <Row>\n    <Col>Specials</Col>\n    {renderDishes(restaurantID)}\n    <Col>\n<Cart></Cart>\n</Col>\n</Row>\n    </>\n)\n}\n  }\n\n\n\n  export default Menu;"]},"metadata":{},"sourceType":"module"}