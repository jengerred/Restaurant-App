{"ast":null,"code":"var _jsxFileName = \"/Users/jennifergerred/Documents/MIT/Week 28/restaurant/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport { AppProvider } from \"../components/context\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\n\nfunction MyApp(props) {\n  // var { cart, addItem, removeItem, user, setUser } = useContext(AppContext);\n  // const [state, setState] = useState({ cart: cart });\n  const {\n    Component,\n    pageProps\n  } = props; // setUser = (currentUser) => {\n  //   console.log(\"SETTING USER\");\n  //   setState((prev) => ({ ...prev, currentUser }));\n  // };\n  // addItem = (item) => {\n  //   let { items } = state.cart;\n  //   let foundItem = true;\n  //   if (items.length > 0) {\n  //     foundItem = items.find(\n  //       (i) => i.attributes.dishId === item.attributes.dishId\n  //     );\n  //     if (!foundItem) foundItem = false;\n  //   } else {\n  //     foundItem = false;\n  //   }\n  //   // if item is not new, add to cart, set quantity to 1\n  //   if (!foundItem) {\n  //     //set quantity property to 1\n  //     let temp = JSON.parse(JSON.stringify(item));\n  //     temp.quantity = 1;\n  //     var newCart = {\n  //       items: [...state.cart.items, temp],\n  //       total: state.cart.total + item.attributes.price,\n  //     };\n  //     setState({ cart: newCart });\n  //   } else {\n  //     // we already have it so just increase quantity ++\n  //     newCart = {\n  //       items: items.map((item) => {\n  //         if (item.attributes.dishId === foundItem.attributes.dishId) {\n  //           return Object.assign({}, item, { quantity: item.quantity + 1 });\n  //         } else {\n  //           return item;\n  //         }\n  //       }),\n  //       total: state.cart.total + item.attributes.price,\n  //     };\n  //   }\n  //   setState({ cart: newCart }); // problem is this is not updated yet\n  // };\n  // removeItem = (item) => {\n  //   let { items } = state.cart;\n  //   //check for item already in cart\n  //   const foundItem = items.find(\n  //     (i) => i.attributes.dishId === item.attributes.dishId\n  //   );\n  //   if (foundItem.quantity > 1) {\n  //     var newCart = {\n  //       items: items.map((item) => {\n  //         if (item.attributes.dishId === foundItem.attributes.dishId) {\n  //           return Object.assign({}, item, { quantity: item.quantity - 1 });\n  //         } else {\n  //           return item;\n  //         }\n  //       }),\n  //       total: state.cart.total - item.attributes.price,\n  //     };\n  //   } else {\n  //     // only 1 in the cart so remove the whole item\n  //     const index = items.findIndex(\n  //       (i) => i.attributes.dishId === foundItem.attributes.dishId\n  //     );\n  //     items.splice(index, 1);\n  //     var newCart = {\n  //       items: items,\n  //       total: state.cart.total - item.attributes.price,\n  //     };\n  //   }\n  //   setState({ cart: newCart });\n  // };\n\n  return __jsx(AppProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n    integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n    crossOrigin: \"anonymous\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default MyApp;\n/*\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\"\nimport Layout from \"../components/layout\"\nimport Cookie from \"js-cookie\"\n\n\nfunction MyApp(props){\n  var {cart,addItem,removeItem, user, setUser} = useContext(AppContext)\n  const [state,setState] = useState({cart:cart});\n  const { Component, pageProps } = props;\n  \n  \n  setUser = (user) => {\n    setState({ user });\n  };\n  addItem = (item) => {\n    let { items } = state.cart;\n    //check for item already in cart\n    //if not in cart, add item if item is found increase quanity ++\n    let foundItem = true;\n    if(items.length > 0){\n      foundItem = items.find((i) => i.id === item.id);\n     \n      if(!foundItem) foundItem = false;\n    }\n    else{\n      foundItem = false;\n    }\n    console.log(`Found Item value: ${JSON.stringify(foundItem)}`)\n    // if item is not new, add to cart, set quantity to 1\n    if (!foundItem) {\n      //set quantity property to 1\n    \n      let temp = JSON.parse(JSON.stringify(item));\n      temp.quantity = 1;\n      var newCart = {\n          items: [...state.cart.items,temp],\n          total: state.cart.total + item.price,\n      }\n      setState({cart:newCart})\n      console.log(`Total items: ${JSON.stringify(newCart)}`)\n    } else {\n      // we already have it so just increase quantity ++\n      console.log(`Total so far:  ${state.cart.total}`)\n      newCart= {\n          items: items.map((item) =>{\n            if(item.id === foundItem.id){\n              return Object.assign({}, item, { quantity: item.quantity + 1 })\n             }else{\n            return item;\n          }}),\n          total: state.cart.total + item.price,\n        }\n    }\n    setState({cart: newCart});  // problem is this is not updated yet\n    console.log(`state reset to cart:${JSON.stringify(state)}`)\n     \n  };\n  removeItem = (item) => {\n    let { items } = state.cart;\n    //check for item already in cart\n    const foundItem = items.find((i) => i.id === item.id);\n    if (foundItem.quantity > 1) {\n      var newCart = {\n        items: items.map((item) =>{\n        if(item.id === foundItem.id){\n          return Object.assign({}, item, { quantity: item.quantity - 1 })\n         }else{\n        return item;\n      }}),\n      total: state.cart.total - item.price,\n      }\n      //console.log(`NewCart after remove: ${JSON.stringify(newCart)}`)\n    } else { // only 1 in the cart so remove the whole item\n      console.log(`Try remove item ${JSON.stringify(foundItem)}`)\n      const index = items.findIndex((i) => i.id === foundItem.id);\n      items.splice(index, 1);\n      var newCart= { items: items, total: state.cart.total - item.price } \n    }\n    setState({cart:newCart});\n  }\n\n  return (\n    <AppContext.Provider value={{cart: state.cart, addItem: addItem, removeItem: removeItem,isAuthenticated:false,user:null,setUser:()=>{}}}>\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n          integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n          crossOrigin=\"anonymous\"\n        />\n      </Head>\n    \n      <Layout>\n          <Component {...pageProps} />\n      </Layout>\n\n    </AppContext.Provider>\n  );\n  \n}\n\n\nexport default MyApp;\n*/","map":{"version":3,"sources":["/Users/jennifergerred/Documents/MIT/Week 28/restaurant/pages/_app.js"],"names":["useContext","useState","Head","AppProvider","AppContext","Home","Layout","Cookie","MyApp","props","Component","pageProps"],"mappings":";;;;;;AACA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB;AACA;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA2BF,KAAjC,CAHoB,CAKpB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAC,YADN;AAEE,IAAA,IAAI,EAAC,uEAFP;AAGE,IAAA,SAAS,EAAC,yEAHZ;AAIE,IAAA,WAAW,EAAC,WAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAUE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeE,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAVF,CADF;AAgBD;;AAED,eAAeH,KAAf;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport { AppProvider } from \"../components/context\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\n\nfunction MyApp(props) {\n  // var { cart, addItem, removeItem, user, setUser } = useContext(AppContext);\n  // const [state, setState] = useState({ cart: cart });\n  const { Component, pageProps } = props;\n\n  // setUser = (currentUser) => {\n  //   console.log(\"SETTING USER\");\n  //   setState((prev) => ({ ...prev, currentUser }));\n  // };\n\n  // addItem = (item) => {\n  //   let { items } = state.cart;\n  //   let foundItem = true;\n  //   if (items.length > 0) {\n  //     foundItem = items.find(\n  //       (i) => i.attributes.dishId === item.attributes.dishId\n  //     );\n\n  //     if (!foundItem) foundItem = false;\n  //   } else {\n  //     foundItem = false;\n  //   }\n  //   // if item is not new, add to cart, set quantity to 1\n  //   if (!foundItem) {\n  //     //set quantity property to 1\n\n  //     let temp = JSON.parse(JSON.stringify(item));\n  //     temp.quantity = 1;\n  //     var newCart = {\n  //       items: [...state.cart.items, temp],\n  //       total: state.cart.total + item.attributes.price,\n  //     };\n  //     setState({ cart: newCart });\n  //   } else {\n  //     // we already have it so just increase quantity ++\n  //     newCart = {\n  //       items: items.map((item) => {\n  //         if (item.attributes.dishId === foundItem.attributes.dishId) {\n  //           return Object.assign({}, item, { quantity: item.quantity + 1 });\n  //         } else {\n  //           return item;\n  //         }\n  //       }),\n  //       total: state.cart.total + item.attributes.price,\n  //     };\n  //   }\n  //   setState({ cart: newCart }); // problem is this is not updated yet\n  // };\n\n  // removeItem = (item) => {\n  //   let { items } = state.cart;\n  //   //check for item already in cart\n  //   const foundItem = items.find(\n  //     (i) => i.attributes.dishId === item.attributes.dishId\n  //   );\n  //   if (foundItem.quantity > 1) {\n  //     var newCart = {\n  //       items: items.map((item) => {\n  //         if (item.attributes.dishId === foundItem.attributes.dishId) {\n  //           return Object.assign({}, item, { quantity: item.quantity - 1 });\n  //         } else {\n  //           return item;\n  //         }\n  //       }),\n  //       total: state.cart.total - item.attributes.price,\n  //     };\n  //   } else {\n  //     // only 1 in the cart so remove the whole item\n  //     const index = items.findIndex(\n  //       (i) => i.attributes.dishId === foundItem.attributes.dishId\n  //     );\n  //     items.splice(index, 1);\n  //     var newCart = {\n  //       items: items,\n  //       total: state.cart.total - item.attributes.price,\n  //     };\n  //   }\n  //   setState({ cart: newCart });\n  // };\n\n  return (\n    <AppProvider>\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n          integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n          crossOrigin=\"anonymous\"\n        />\n      </Head>\n\n      <Layout>\n        <Component {...pageProps} />\n      </Layout>\n    </AppProvider>\n  );\n}\n\nexport default MyApp;\n\n\n\n/*\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\"\nimport Layout from \"../components/layout\"\nimport Cookie from \"js-cookie\"\n\n\nfunction MyApp(props){\n  var {cart,addItem,removeItem, user, setUser} = useContext(AppContext)\n  const [state,setState] = useState({cart:cart});\n  const { Component, pageProps } = props;\n  \n  \n  setUser = (user) => {\n    setState({ user });\n  };\n  addItem = (item) => {\n    let { items } = state.cart;\n    //check for item already in cart\n    //if not in cart, add item if item is found increase quanity ++\n    let foundItem = true;\n    if(items.length > 0){\n      foundItem = items.find((i) => i.id === item.id);\n     \n      if(!foundItem) foundItem = false;\n    }\n    else{\n      foundItem = false;\n    }\n    console.log(`Found Item value: ${JSON.stringify(foundItem)}`)\n    // if item is not new, add to cart, set quantity to 1\n    if (!foundItem) {\n      //set quantity property to 1\n    \n      let temp = JSON.parse(JSON.stringify(item));\n      temp.quantity = 1;\n      var newCart = {\n          items: [...state.cart.items,temp],\n          total: state.cart.total + item.price,\n      }\n      setState({cart:newCart})\n      console.log(`Total items: ${JSON.stringify(newCart)}`)\n    } else {\n      // we already have it so just increase quantity ++\n      console.log(`Total so far:  ${state.cart.total}`)\n      newCart= {\n          items: items.map((item) =>{\n            if(item.id === foundItem.id){\n              return Object.assign({}, item, { quantity: item.quantity + 1 })\n             }else{\n            return item;\n          }}),\n          total: state.cart.total + item.price,\n        }\n    }\n    setState({cart: newCart});  // problem is this is not updated yet\n    console.log(`state reset to cart:${JSON.stringify(state)}`)\n     \n  };\n  removeItem = (item) => {\n    let { items } = state.cart;\n    //check for item already in cart\n    const foundItem = items.find((i) => i.id === item.id);\n    if (foundItem.quantity > 1) {\n      var newCart = {\n        items: items.map((item) =>{\n        if(item.id === foundItem.id){\n          return Object.assign({}, item, { quantity: item.quantity - 1 })\n         }else{\n        return item;\n      }}),\n      total: state.cart.total - item.price,\n      }\n      //console.log(`NewCart after remove: ${JSON.stringify(newCart)}`)\n    } else { // only 1 in the cart so remove the whole item\n      console.log(`Try remove item ${JSON.stringify(foundItem)}`)\n      const index = items.findIndex((i) => i.id === foundItem.id);\n      items.splice(index, 1);\n      var newCart= { items: items, total: state.cart.total - item.price } \n    }\n    setState({cart:newCart});\n  }\n\n  return (\n    <AppContext.Provider value={{cart: state.cart, addItem: addItem, removeItem: removeItem,isAuthenticated:false,user:null,setUser:()=>{}}}>\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n          integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n          crossOrigin=\"anonymous\"\n        />\n      </Head>\n    \n      <Layout>\n          <Component {...pageProps} />\n      </Layout>\n\n    </AppContext.Provider>\n  );\n  \n}\n\n\nexport default MyApp;\n*/"]},"metadata":{},"sourceType":"module"}